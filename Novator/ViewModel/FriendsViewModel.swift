import Foundation
import SwiftUI
import Combine

final class FriendsViewModel: ObservableObject {
    // MARK: - Input
    @Published var profile: UserProfileViewModel? // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ @Published –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    @Published var searchQuery = "" // –ù–æ–≤—ã–π: –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ username

    // MARK: - Output
    @Published var friends: [UserProfile] = []
    // Computed: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è –ø–æ –ø–æ–∏—Å–∫—É
    var filteredFriends: [UserProfile] {
        if searchQuery.isEmpty {
            return friends
        }
        return friends.filter { user in
            user.username.localizedCaseInsensitiveContains(searchQuery) ||
            user.fullName.localizedCaseInsensitiveContains(searchQuery) // –ë–æ–Ω—É—Å: –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–∂–µ
        }
    }

    private let userDataSource: UserDataSourceProtocol
    private var cancellables = Set<AnyCancellable>()

    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init(profile: UserProfileViewModel?, userDataSource: UserDataSourceProtocol = UserDataSource()) {
        self.profile = profile
        self.userDataSource = userDataSource
        if profile != nil {
            setupFriends()
        }
        bindProfile()
    }

    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    func setupFriends() {
        guard let profile = profile else {
            print("‚ö†Ô∏è FriendsViewModel: profile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º setupFriends")
            return
        }
        self.friends = userDataSource.getDemoFriends(friendIds: profile.profile.friends)
        print("üÜï FriendsViewModel: setupFriends —Å –¥—Ä—É–∑—å—è–º–∏: \(friends.map { $0.id })")
    }

    private func bindProfile() {
        $profile
            .sink { [weak self] newProfile in
                guard let self = self, let profile = newProfile else { return }
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è profile.profile –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ profile
                profile.$profile
                    .sink { [weak self] newProfile in
                        guard let self = self else { return }
                        self.friends = self.userDataSource.getDemoFriends(friendIds: newProfile.friends)
                        self.objectWillChange.send()
                        print("üîî FriendsViewModel: —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω: \(self.friends.map { $0.id })")
                    }
                    .store(in: &self.cancellables)
            }
            .store(in: &cancellables)
    }
}
