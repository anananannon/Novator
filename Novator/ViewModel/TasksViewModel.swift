import Foundation
import SwiftUI

// MARK: - TasksViewModel
class TasksViewModel: ObservableObject {
    @Published var program: LearningProgram?
    @Published var selectedAnswer: String?
    @Published var showResult: Bool = false
    @Published var isCorrect: Bool = false
    @Published var mistakeCount: Int = 0
    let profile: UserProfileViewModel

    // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    private var completedTaskIds: [UUID] = []
    private var accumulatedStars = 0
    private var accumulatedRaitingPoints = 0

    init(profile: UserProfileViewModel, lessonId: String) {
        self.profile = profile
        self.program = TaskManager.createLearningProgram(
            for: lessonId,
            completedTasks: profile.profile.completedTasks
        )
        print("TasksViewModel: Initialized with lesson \(lessonId), tasks count: \(program?.tasks.count ?? 0)")
    }

    // MARK: - –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
    var currentTask: AppTask? {
        program?.currentTask
    }
    
    var currentTaskNumber: Int {
        guard let program = program else { return 0 }
        return program.currentIndex
    }
    
    var totalTasks: Int {
        program?.tasks.count ?? 0
    }

    var progress: Double {
        guard let program = program, !program.tasks.isEmpty else { return 0 }
        return Double(program.currentIndex) / Double(program.tasks.count)
    }

    var progressText: String {
        "\(currentTaskNumber)/\(totalTasks)"
    }

    // MARK: - Result & Action
    var resultColor: Color {
        isCorrect ? Color("redCorrect") : Color("taskMistake")
    }

    var resultText: String {
        isCorrect ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" : "–û—à–∏–±–∫–∞"
    }

    var isNextButtonActive: Bool {
        showResult
    }

    var actionButtonTitle: String {
        isNextButtonActive ? "–î–∞–ª–µ–µ" : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    }

    func actionButtonTapped() {
        if isNextButtonActive {
            loadNextTask()
        } else {
            checkAnswer()
        }
    }

    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    func checkAnswer() {
        guard let task = currentTask, let answer = selectedAnswer else { return }
        isCorrect = answer == task.correctAnswer
        showResult = true

        if isCorrect {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–∫–∞–ª—å–Ω–æ
            completedTaskIds.append(task.id)
            accumulatedStars += task.stars
            accumulatedRaitingPoints += task.raitingPoints
        } else {
            mistakeCount += 1
            print("üîî TasksViewModel: –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞, —Ç–µ–∫—É—â–∏–π mistakeCount = \(mistakeCount)")
        }
    }

    // MARK: - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    func loadNextTask() {
        guard var mutableProgram = program else { return }
        if !isCorrect {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω–µ—Ü
            let oldIndex = mutableProgram.currentIndex
            let taskToMove = mutableProgram.tasks.remove(at: oldIndex)
            mutableProgram.tasks.append(taskToMove)
            mutableProgram.currentIndex = oldIndex
        } else {
            mutableProgram.currentIndex += 1
        }
        program = mutableProgram
        selectedAnswer = nil
        showResult = false
        isCorrect = false
        print("üîî TasksViewModel: loadNextTask, currentTask = \(String(describing: currentTask?.id))")
    }

    // MARK: - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    func completeLessonIfFinished() {
        guard let lessonId = program?.lessonId else { return }

        let totalTasksInLesson = TaskManager.getLesson(for: lessonId)?.tasks.count ?? 0
        if completedTaskIds.count == totalTasksInLesson {
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
            profile.addStars(accumulatedStars)
            profile.addRaitingPoints(accumulatedRaitingPoints)
            completedTaskIds.forEach { profile.completeTask($0) }
            profile.completeLesson(lessonId)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            AchievementManager.checkAchievements(for: profile)

            // –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π
            accumulatedStars = 0
            accumulatedRaitingPoints = 0
            completedTaskIds = []
            mistakeCount = 0

            print("‚úÖ Lesson \(lessonId) –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ –æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.")
        }
    }

    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥
    private func isLessonCompleted(lessonId: String) -> Bool {
        guard let lesson = TaskManager.getLesson(for: lessonId) else { return false }
        let lessonTaskIds = Set(lesson.tasks.map { $0.id })
        let completedIds = Set(profile.profile.completedTasks)
        return lessonTaskIds.isSubset(of: completedIds)
    }

    // MARK: - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    func logAppear() {
        print("TaskDetailView: Appeared, current task: \(currentTask?.question ?? "none")")
    }
}
